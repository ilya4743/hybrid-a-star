#include <iostream>
#include "locationmap.h"
#include "hybrid_astar.h"
#include <boost/qvm/vec.hpp>

typedef boost::qvm::vec<float,3> vec3;

using namespace std;

vector<int> grid = {
  0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,
  0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,
  0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,
  0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,
  0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,
  0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,
  0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,
  0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,
  0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,
  0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,
  0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,
  0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,
  0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  };

int main()
{
    //HybridAStar astar;
    vec3 start({0.5,0.5,0.0f});
    vec3 end({15.5,15.5,M_PI_2});
    OccurancyMatrix mat(15,15,1,grid);
    //astar.Search(start, end, mat);
    return 0;
}